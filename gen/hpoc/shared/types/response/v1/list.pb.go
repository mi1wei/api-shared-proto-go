// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hpoc/shared/types/response/v1/list.proto

package responsev1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type List struct {
	// current max amount of results to return (pagination)
	CurrentLimit int64 `protobuf:"varint,1,opt,name=current_limit,json=currentLimit,proto3" json:"current_limit,omitempty"`
	// current amount of results to skip (pagination)
	CurrentOffset int64 `protobuf:"varint,2,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`
	// current sort oder for the results
	CurrentOrder []string `protobuf:"bytes,3,rep,name=current_order,json=currentOrder,proto3" json:"current_order,omitempty"`
	// Total amount of results in db for this query
	DbTotal              int64    `protobuf:"varint,4,opt,name=db_total,json=dbTotal,proto3" json:"db_total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *List) Reset()         { *m = List{} }
func (m *List) String() string { return proto.CompactTextString(m) }
func (*List) ProtoMessage()    {}
func (*List) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbc945379f3979a1, []int{0}
}
func (m *List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_List.Merge(m, src)
}
func (m *List) XXX_Size() int {
	return m.Size()
}
func (m *List) XXX_DiscardUnknown() {
	xxx_messageInfo_List.DiscardUnknown(m)
}

var xxx_messageInfo_List proto.InternalMessageInfo

func (m *List) GetCurrentLimit() int64 {
	if m != nil {
		return m.CurrentLimit
	}
	return 0
}

func (m *List) GetCurrentOffset() int64 {
	if m != nil {
		return m.CurrentOffset
	}
	return 0
}

func (m *List) GetCurrentOrder() []string {
	if m != nil {
		return m.CurrentOrder
	}
	return nil
}

func (m *List) GetDbTotal() int64 {
	if m != nil {
		return m.DbTotal
	}
	return 0
}

func init() {
	proto.RegisterType((*List)(nil), "hpoc.shared.types.response.v1.List")
}

func init() {
	proto.RegisterFile("hpoc/shared/types/response/v1/list.proto", fileDescriptor_cbc945379f3979a1)
}

var fileDescriptor_cbc945379f3979a1 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xbf, 0x4e, 0xeb, 0x30,
	0x18, 0xc5, 0xeb, 0xb4, 0xba, 0xf7, 0x36, 0xba, 0xf7, 0x0e, 0x99, 0xc2, 0xd0, 0xa8, 0x05, 0x21,
	0x95, 0xa1, 0xb6, 0x2c, 0x36, 0xb3, 0x75, 0xa1, 0x43, 0x51, 0xab, 0xb4, 0xea, 0x80, 0x22, 0x55,
	0xf9, 0xe3, 0xb6, 0x96, 0x9a, 0x3a, 0xb2, 0xdd, 0x22, 0x5e, 0x83, 0x89, 0x99, 0x91, 0x8d, 0xb7,
	0x40, 0x4c, 0x8c, 0x8c, 0x28, 0x6c, 0x3c, 0x01, 0x23, 0xb2, 0x83, 0x11, 0x53, 0x37, 0xfb, 0x9c,
	0xdf, 0xf7, 0xe9, 0x9c, 0xcf, 0xed, 0xae, 0x0a, 0x9e, 0x22, 0xb9, 0x8a, 0x05, 0xcd, 0x90, 0xba,
	0x2e, 0xa8, 0x44, 0x82, 0xca, 0x82, 0x6f, 0x24, 0x45, 0x3b, 0x8c, 0xd6, 0x4c, 0x2a, 0x58, 0x08,
	0xae, 0xb8, 0xd7, 0xd2, 0x24, 0xac, 0x48, 0x68, 0x48, 0x68, 0x49, 0xb8, 0xc3, 0x87, 0x37, 0xc0,
	0x6d, 0x0c, 0x99, 0x54, 0xde, 0x91, 0xfb, 0x2f, 0xdd, 0x0a, 0x41, 0x37, 0x6a, 0xbe, 0x66, 0x39,
	0x53, 0x3e, 0x68, 0x83, 0x6e, 0x3d, 0xfc, 0xfb, 0x25, 0x0e, 0xb5, 0xe6, 0x1d, 0xbb, 0xff, 0x2d,
	0xc4, 0x17, 0x0b, 0x49, 0x95, 0xef, 0x18, 0xca, 0x8e, 0x8e, 0x8c, 0xf8, 0x73, 0x17, 0x17, 0x19,
	0x15, 0x7e, 0xbd, 0x5d, 0xef, 0x36, 0xbf, 0x77, 0x8d, 0xb4, 0xe6, 0x1d, 0xb8, 0x7f, 0xb2, 0x64,
	0xae, 0xb8, 0x8a, 0xd7, 0x7e, 0xc3, 0x6c, 0xf9, 0x9d, 0x25, 0x53, 0xfd, 0xed, 0x3f, 0x38, 0x8f,
	0x65, 0x00, 0x9e, 0xcb, 0x00, 0xbc, 0x96, 0x01, 0xb8, 0x7d, 0x0b, 0x6a, 0x6e, 0x27, 0xe5, 0x39,
	0xdc, 0x5b, 0xa5, 0xdf, 0xd4, 0x3d, 0xc6, 0xba, 0xf4, 0x18, 0x5c, 0x86, 0x4b, 0xa6, 0x56, 0xdb,
	0x04, 0xa6, 0x3c, 0x47, 0x39, 0xc3, 0x57, 0x94, 0xa1, 0xb8, 0x60, 0xbd, 0x6a, 0xb8, 0x67, 0x4e,
	0xd3, 0x5b, 0x72, 0xb4, 0xa4, 0x1b, 0xb4, 0xf7, 0x94, 0x67, 0xf6, 0xbd, 0xc3, 0x2f, 0x00, 0x7c,
	0x80, 0xda, 0x9d, 0xd3, 0x18, 0x4c, 0xa6, 0xe1, 0xbd, 0xd3, 0x1a, 0xe8, 0x34, 0x93, 0x2a, 0xcd,
	0xd4, 0xa4, 0x09, 0x6d, 0x9a, 0x19, 0x7e, 0xaa, 0xfc, 0xa8, 0xf2, 0x23, 0xe3, 0x47, 0xd6, 0x8f,
	0x66, 0xb8, 0x74, 0x4e, 0xf6, 0xfa, 0xd1, 0xf9, 0xb8, 0x7f, 0x41, 0x55, 0x9c, 0xc5, 0x2a, 0x7e,
	0x77, 0x3a, 0x9a, 0x25, 0xa4, 0x82, 0x09, 0x31, 0x34, 0x21, 0x16, 0x27, 0x64, 0x86, 0x93, 0x5f,
	0xa6, 0xd3, 0xe9, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x30, 0x43, 0x6a, 0x1a, 0x02, 0x00,
	0x00,
}

func (m *List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *List) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *List) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DbTotal != 0 {
		i = encodeVarintList(dAtA, i, uint64(m.DbTotal))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CurrentOrder) > 0 {
		for iNdEx := len(m.CurrentOrder) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CurrentOrder[iNdEx])
			copy(dAtA[i:], m.CurrentOrder[iNdEx])
			i = encodeVarintList(dAtA, i, uint64(len(m.CurrentOrder[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.CurrentOffset != 0 {
		i = encodeVarintList(dAtA, i, uint64(m.CurrentOffset))
		i--
		dAtA[i] = 0x10
	}
	if m.CurrentLimit != 0 {
		i = encodeVarintList(dAtA, i, uint64(m.CurrentLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintList(dAtA []byte, offset int, v uint64) int {
	offset -= sovList(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentLimit != 0 {
		n += 1 + sovList(uint64(m.CurrentLimit))
	}
	if m.CurrentOffset != 0 {
		n += 1 + sovList(uint64(m.CurrentOffset))
	}
	if len(m.CurrentOrder) > 0 {
		for _, s := range m.CurrentOrder {
			l = len(s)
			n += 1 + l + sovList(uint64(l))
		}
	}
	if m.DbTotal != 0 {
		n += 1 + sovList(uint64(m.DbTotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovList(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozList(x uint64) (n int) {
	return sovList(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLimit", wireType)
			}
			m.CurrentLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentOffset", wireType)
			}
			m.CurrentOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentOrder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentOrder = append(m.CurrentOrder, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbTotal", wireType)
			}
			m.DbTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DbTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipList(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowList
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthList
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupList
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthList
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthList        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowList          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupList = fmt.Errorf("proto: unexpected end of group")
)
