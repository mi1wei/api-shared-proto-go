// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hpoc/shared/types/request/v1/list.proto

package requestv1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type List struct {
	// By default only id will be returned
	FieldMask []string `protobuf:"bytes,1,rep,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// max amount of results to return (pagination)
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// amount of results to skip (pagination)
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// sort oder for the results
	// example ['firstname', 'lastname', 'address.zip']
	// example ['-firstname', '+lastname']
	// + asc (default), - desc
	Order                []string `protobuf:"bytes,4,rep,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *List) Reset()         { *m = List{} }
func (m *List) String() string { return proto.CompactTextString(m) }
func (*List) ProtoMessage()    {}
func (*List) Descriptor() ([]byte, []int) {
	return fileDescriptor_5893d23fe4d19057, []int{0}
}
func (m *List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_List.Merge(m, src)
}
func (m *List) XXX_Size() int {
	return m.Size()
}
func (m *List) XXX_DiscardUnknown() {
	xxx_messageInfo_List.DiscardUnknown(m)
}

var xxx_messageInfo_List proto.InternalMessageInfo

func (m *List) GetFieldMask() []string {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *List) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *List) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *List) GetOrder() []string {
	if m != nil {
		return m.Order
	}
	return nil
}

func init() {
	proto.RegisterType((*List)(nil), "hpoc.shared.types.request.v1.List")
}

func init() {
	proto.RegisterFile("hpoc/shared/types/request/v1/list.proto", fileDescriptor_5893d23fe4d19057)
}

var fileDescriptor_5893d23fe4d19057 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x3f, 0x4f, 0x32, 0x31,
	0x1c, 0xc7, 0xe9, 0xc1, 0x43, 0x42, 0xc7, 0xcb, 0x13, 0x73, 0x03, 0x5e, 0x2e, 0x2e, 0xb2, 0xd0,
	0xa6, 0x71, 0xab, 0x1b, 0x8b, 0x0c, 0x92, 0x5c, 0x0e, 0xc2, 0x60, 0x2e, 0x31, 0x85, 0x2b, 0xd0,
	0xc0, 0xd9, 0xf3, 0x5a, 0x30, 0xbe, 0x13, 0x67, 0x47, 0x5e, 0x89, 0x71, 0x72, 0x74, 0x34, 0xe7,
	0xe6, 0x2b, 0x70, 0x34, 0xfd, 0x33, 0xb3, 0xf5, 0xf7, 0xfb, 0x7e, 0xda, 0x7c, 0xbe, 0x85, 0x97,
	0x9b, 0x4a, 0x2e, 0xb1, 0xda, 0xb0, 0x9a, 0x17, 0x58, 0x3f, 0x57, 0x5c, 0xe1, 0x9a, 0x3f, 0xee,
	0xb9, 0xd2, 0xf8, 0x40, 0xf0, 0x4e, 0x28, 0x8d, 0xaa, 0x5a, 0x6a, 0x19, 0xf6, 0x0d, 0x88, 0x1c,
	0x88, 0x2c, 0x88, 0x3c, 0x88, 0x0e, 0xe4, 0x42, 0xc0, 0xce, 0xad, 0x50, 0x3a, 0x3c, 0x87, 0x70,
	0x25, 0xf8, 0xae, 0xb8, 0x2f, 0x99, 0xda, 0x46, 0x20, 0x69, 0x0f, 0x7a, 0x59, 0xcf, 0x6e, 0x26,
	0x4c, 0x6d, 0xc3, 0xff, 0xf0, 0xdf, 0x4e, 0x94, 0x42, 0x47, 0x41, 0x02, 0x06, 0xed, 0xcc, 0x0d,
	0xe1, 0x19, 0xec, 0xca, 0xd5, 0x4a, 0x71, 0x1d, 0xb5, 0xed, 0xda, 0x4f, 0x86, 0x96, 0x75, 0xc1,
	0xeb, 0xa8, 0x63, 0xdf, 0x71, 0xc3, 0xe8, 0x18, 0xbc, 0x35, 0x31, 0xf8, 0x68, 0x62, 0xf0, 0xd5,
	0xc4, 0xe0, 0xe5, 0x3b, 0x6e, 0xc1, 0x64, 0x29, 0x4b, 0x74, 0xca, 0x6f, 0xd4, 0x33, 0x76, 0xa9,
	0x29, 0x92, 0x82, 0xbb, 0x74, 0x2d, 0xf4, 0x66, 0xbf, 0x40, 0x4b, 0x59, 0xe2, 0x52, 0x90, 0x27,
	0x2e, 0x30, 0xab, 0xc4, 0xd0, 0xdd, 0x1d, 0xda, 0xba, 0xc3, 0xb5, 0xc4, 0x6b, 0xfe, 0x80, 0x4f,
	0xfd, 0xce, 0xb5, 0x3f, 0x1e, 0xc8, 0x27, 0x00, 0xbf, 0xa0, 0xf5, 0x1a, 0x74, 0xc6, 0xd3, 0x59,
	0x76, 0x0c, 0xfa, 0x63, 0xa3, 0x32, 0x75, 0x2a, 0x33, 0xab, 0x92, 0x79, 0x95, 0x39, 0x79, 0x77,
	0x71, 0xee, 0xe2, 0xdc, 0xc6, 0xb9, 0x8f, 0xf3, 0x39, 0x69, 0x82, 0xc1, 0xa9, 0x38, 0xbf, 0x49,
	0x47, 0x13, 0xae, 0x59, 0xc1, 0x34, 0xfb, 0x09, 0x12, 0x83, 0x52, 0xea, 0x58, 0x4a, 0x2d, 0x4c,
	0xa9, 0xa7, 0x29, 0x9d, 0x93, 0x45, 0xd7, 0xb6, 0xb9, 0xfa, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xfb,
	0x96, 0x9e, 0xc7, 0xe7, 0x01, 0x00, 0x00,
}

func (m *List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *List) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *List) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Order) > 0 {
		for iNdEx := len(m.Order) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Order[iNdEx])
			copy(dAtA[i:], m.Order[iNdEx])
			i = encodeVarintList(dAtA, i, uint64(len(m.Order[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Offset != 0 {
		i = encodeVarintList(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintList(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FieldMask) > 0 {
		for iNdEx := len(m.FieldMask) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FieldMask[iNdEx])
			copy(dAtA[i:], m.FieldMask[iNdEx])
			i = encodeVarintList(dAtA, i, uint64(len(m.FieldMask[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintList(dAtA []byte, offset int, v uint64) int {
	offset -= sovList(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FieldMask) > 0 {
		for _, s := range m.FieldMask {
			l = len(s)
			n += 1 + l + sovList(uint64(l))
		}
	}
	if m.Limit != 0 {
		n += 1 + sovList(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovList(uint64(m.Offset))
	}
	if len(m.Order) > 0 {
		for _, s := range m.Order {
			l = len(s)
			n += 1 + l + sovList(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovList(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozList(x uint64) (n int) {
	return sovList(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldMask = append(m.FieldMask, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = append(m.Order, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipList(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowList
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthList
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupList
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthList
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthList        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowList          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupList = fmt.Errorf("proto: unexpected end of group")
)
