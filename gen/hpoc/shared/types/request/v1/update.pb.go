// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hpoc/shared/types/request/v1/update.proto

package requestv1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Update struct {
	// fields to be updated
	UpdateMask []string `protobuf:"bytes,1,rep,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// only validate, dont create the resource
	DryRun bool `protobuf:"varint,2,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// Only update the resource if this version matches the resources meta.version
	IfMatch string `protobuf:"bytes,3,opt,name=if_match,json=ifMatch,proto3" json:"if_match,omitempty"`
	// do not return the result
	SkipResult           bool     `protobuf:"varint,4,opt,name=skip_result,json=skipResult,proto3" json:"skip_result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_530036fed4901406, []int{0}
}
func (m *Update) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Update.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(m, src)
}
func (m *Update) XXX_Size() int {
	return m.Size()
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

func (m *Update) GetUpdateMask() []string {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *Update) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

func (m *Update) GetIfMatch() string {
	if m != nil {
		return m.IfMatch
	}
	return ""
}

func (m *Update) GetSkipResult() bool {
	if m != nil {
		return m.SkipResult
	}
	return false
}

func init() {
	proto.RegisterType((*Update)(nil), "hpoc.shared.types.request.v1.Update")
}

func init() {
	proto.RegisterFile("hpoc/shared/types/request/v1/update.proto", fileDescriptor_530036fed4901406)
}

var fileDescriptor_530036fed4901406 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x3f, 0x6f, 0xa3, 0x30,
	0x18, 0xc6, 0x63, 0x12, 0xe5, 0x8f, 0xb3, 0xb1, 0x1c, 0x27, 0x45, 0x1c, 0xba, 0x89, 0x1b, 0x82,
	0x85, 0x6e, 0x73, 0xb7, 0x2c, 0xcd, 0x12, 0x09, 0x91, 0x34, 0x43, 0x85, 0x84, 0x1c, 0x70, 0x02,
	0x4a, 0x09, 0xd4, 0x36, 0xa9, 0xb2, 0xf4, 0x73, 0x74, 0xee, 0x58, 0xf5, 0x83, 0x54, 0x9d, 0x3a,
	0x76, 0xac, 0xe8, 0xd6, 0x4f, 0xd0, 0xb1, 0xb2, 0xcd, 0x9c, 0x0d, 0xde, 0xe7, 0xf7, 0x58, 0xbf,
	0xf7, 0x85, 0xff, 0xb2, 0xaa, 0x4c, 0x10, 0xcf, 0x08, 0xa3, 0x29, 0x12, 0xa7, 0x8a, 0x72, 0xc4,
	0xe8, 0x6d, 0x4d, 0xb9, 0x40, 0x47, 0x1f, 0xd5, 0x55, 0x4a, 0x04, 0xf5, 0x2a, 0x56, 0x8a, 0xd2,
	0x9c, 0x48, 0xd4, 0xd3, 0xa8, 0xa7, 0x50, 0xaf, 0x45, 0xbd, 0xa3, 0xff, 0xf7, 0x1e, 0xf6, 0xaf,
	0x14, 0x6d, 0xfe, 0x81, 0x63, 0xdd, 0x8b, 0x0b, 0xc2, 0xf7, 0x16, 0x70, 0xba, 0xee, 0x28, 0x84,
	0x7a, 0xb4, 0x20, 0x7c, 0x6f, 0xfe, 0x82, 0x83, 0x94, 0x9d, 0x62, 0x56, 0x1f, 0x2c, 0xc3, 0x01,
	0xee, 0x30, 0xec, 0xa7, 0xec, 0x14, 0xd6, 0x07, 0xf3, 0x37, 0x1c, 0xe6, 0xdb, 0xb8, 0x20, 0x22,
	0xc9, 0xac, 0xae, 0x03, 0xdc, 0x51, 0x38, 0xc8, 0xb7, 0x0b, 0xf9, 0x2b, 0x1f, 0xe5, 0xfb, 0xbc,
	0x8a, 0x19, 0xe5, 0xf5, 0x8d, 0xb0, 0x7a, 0xaa, 0x07, 0xe5, 0x28, 0x54, 0x93, 0xd9, 0xb3, 0xf1,
	0xd2, 0xd8, 0xe0, 0xad, 0xb1, 0xc1, 0x47, 0x63, 0x83, 0x87, 0x4f, 0xbb, 0x03, 0x9d, 0xa4, 0x2c,
	0xbc, 0x73, 0xd2, 0xb3, 0xb1, 0x56, 0x0e, 0xe4, 0x7e, 0x01, 0xb8, 0x0e, 0x76, 0xb9, 0xc8, 0xea,
	0x8d, 0x97, 0x94, 0x05, 0x2a, 0x72, 0xff, 0x8e, 0xe6, 0x88, 0x54, 0xf9, 0x54, 0xb7, 0xa7, 0xea,
	0x0a, 0xd3, 0x5d, 0x89, 0x76, 0xf4, 0x80, 0xce, 0x9d, 0xed, 0xa2, 0xfd, 0x3c, 0xfa, 0xef, 0x00,
	0x7c, 0x83, 0xce, 0xa3, 0xd1, 0x9b, 0x2f, 0x57, 0xe1, 0x93, 0x31, 0x99, 0x4b, 0x99, 0xa5, 0x96,
	0x59, 0x29, 0x99, 0xb0, 0x95, 0x59, 0xfb, 0xaf, 0x3a, 0x8e, 0x74, 0x1c, 0xa9, 0x38, 0x6a, 0xe3,
	0x68, 0xed, 0x37, 0x86, 0x7b, 0x2e, 0x8e, 0x2e, 0x83, 0xd9, 0x82, 0x0a, 0x92, 0x12, 0x41, 0xbe,
	0x0c, 0x47, 0xa2, 0x18, 0x6b, 0x16, 0x63, 0x05, 0x63, 0xdc, 0xd2, 0x18, 0xaf, 0xfd, 0x4d, 0x5f,
	0x6d, 0xf3, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0x38, 0xdf, 0x6d, 0x1c, 0x00, 0x02, 0x00, 0x00,
}

func (m *Update) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Update) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Update) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SkipResult {
		i--
		if m.SkipResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.IfMatch) > 0 {
		i -= len(m.IfMatch)
		copy(dAtA[i:], m.IfMatch)
		i = encodeVarintUpdate(dAtA, i, uint64(len(m.IfMatch)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DryRun {
		i--
		if m.DryRun {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.UpdateMask) > 0 {
		for iNdEx := len(m.UpdateMask) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UpdateMask[iNdEx])
			copy(dAtA[i:], m.UpdateMask[iNdEx])
			i = encodeVarintUpdate(dAtA, i, uint64(len(m.UpdateMask[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintUpdate(dAtA []byte, offset int, v uint64) int {
	offset -= sovUpdate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Update) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpdateMask) > 0 {
		for _, s := range m.UpdateMask {
			l = len(s)
			n += 1 + l + sovUpdate(uint64(l))
		}
	}
	if m.DryRun {
		n += 2
	}
	l = len(m.IfMatch)
	if l > 0 {
		n += 1 + l + sovUpdate(uint64(l))
	}
	if m.SkipResult {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUpdate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUpdate(x uint64) (n int) {
	return sovUpdate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Update) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Update: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Update: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateMask = append(m.UpdateMask, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DryRun", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DryRun = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfMatch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IfMatch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipResult = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpdate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpdate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUpdate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUpdate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUpdate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUpdate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpdate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUpdate = fmt.Errorf("proto: unexpected end of group")
)
